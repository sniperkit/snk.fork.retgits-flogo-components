// generated by amalgomate; DO NOT EDIT
package main

import (
	"fmt"
	"os"
	"sort"

	create "github.com/sniperkit/snk.fork.retgits-flogo-components/command/repack/fdev/fdev/internal/github.com/TIBCOSoftware/flogo-cli/cmd/flogo"
	device "github.com/sniperkit/snk.fork.retgits-flogo-components/command/repack/fdev/fdev/internal/github.com/TIBCOSoftware/flogo-cli/cmd/flogodevice"
	gen "github.com/sniperkit/snk.fork.retgits-flogo-components/command/repack/fdev/fdev/internal/github.com/TIBCOSoftware/flogo-cli/cmd/flogogen"
	fgen "github.com/sniperkit/snk.fork.retgits-flogo-components/command/repack/fdev/fdev/internal/github.com/retgits/fgen"
	web "github.com/sniperkit/snk.fork.retgits-flogo-components/command/repack/fdev/fdev/internal/github.com/retgits/flogowebhelper"
)

var programs = map[string]func(){"create": func() {
	create.AmalgomatedMain()
}, "device": func() {
	device.AmalgomatedMain()
}, "fgen": func() {
	fgen.AmalgomatedMain()
}, "gen": func() {
	gen.AmalgomatedMain()
}, "web": func() {
	web.AmalgomatedMain()
},
}

func main() {
	if len(os.Args) < 2 {
		fmt.Println("Missing program argument. Valid values:", cmds())
		os.Exit(1)
	}

	programName := os.Args[1]
	if _, ok := programs[programName]; !ok {
		fmt.Printf("Unknown program: \"%v\". Valid values: %v\n", programName, cmds())
		os.Exit(1)
	}

	os.Args = append([]string{os.Args[0]}, os.Args[2:]...)
	programs[programName]()
}

func cmds() []string {
	var cmds []string
	for key := range programs {
		cmds = append(cmds, key)
	}
	sort.Strings(cmds)
	return cmds
}
